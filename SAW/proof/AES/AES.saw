/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/


////////////////////////////////////////////////////////////////////////////////
// Specifications

let AES_BLOCK_SIZE = 16;
let AES_MAXNR = 14;
let aes_key_len = 32;


let fresh_aes_key_st = do {
  let rd_key_sz = eval_size {| 4 * (AES_MAXNR + 1) |};
  rd_key <- crucible_fresh_var "rd_key" (llvm_array rd_key_sz (llvm_int 32));
  return {{ { rd_key = rd_key } }};
};

let points_to_aes_key_st ptr key = do {
  let nr = eval_size {| AES_MAXNR - 1 |};
  crucible_points_to_untyped ptr (crucible_struct [(crucible_term {{ key.rd_key }}), (crucible_term {{ `nr : [32] }})]);
};


let aes_hw_set_encrypt_key_spec = do {
  global_alloc_init "OPENSSL_ia32cap_P" {{ ia32cap }};

  (user_key, user_key_ptr) <- ptr_to_fresh_readonly "user_key" (llvm_array aes_key_len (llvm_int 8));
  key_ptr <- crucible_alloc (llvm_struct "struct.aes_key_st");

  let bits = eval_size {| aes_key_len * 8 |};
  crucible_execute_func [user_key_ptr, (crucible_term {{ `bits : [32] }}), key_ptr];

  global_points_to "OPENSSL_ia32cap_P" {{ ia32cap }};

  //let key = {{ { rd_key = map reverse (fromKS (ExpandKey (join user_key))) } }};
  let key = {{ { rd_key = aes_key_bits_from_schedule' (ExpandKey (join user_key)) } }};
  points_to_aes_key_st key_ptr key;

  crucible_return (crucible_term {{ 0 : [32] }});
};


let aes_hw_encrypt_spec = do {
  (in_, in_ptr) <- ptr_to_fresh_readonly "in" (llvm_array AES_BLOCK_SIZE (llvm_int 8));
  out_ptr <- crucible_alloc (llvm_array AES_BLOCK_SIZE (llvm_int 8));
  key_ptr <- crucible_alloc_readonly (llvm_struct "struct.aes_key_st");
  key <- fresh_aes_key_st;
  points_to_aes_key_st key_ptr key;

  crucible_execute_func [in_ptr, out_ptr, key_ptr];

  crucible_points_to out_ptr (crucible_term {{ aes_hw_encrypt in_ key.rd_key }});
};

let aes_hw_encrypt_spec' = do {
  (in_, inout_ptr) <- ptr_to_fresh "in" (llvm_array AES_BLOCK_SIZE (llvm_int 8));
  key_ptr <- crucible_alloc_readonly (llvm_struct "struct.aes_key_st");
  key <- fresh_aes_key_st;
  points_to_aes_key_st key_ptr key;

  crucible_execute_func [inout_ptr, inout_ptr, key_ptr];

  crucible_points_to inout_ptr (crucible_term {{ aes_hw_encrypt in_ key.rd_key }});
};


let aes_hw_ctr32_encrypt_blocks_spec len = do {
  let len' = eval_size {| len * AES_BLOCK_SIZE |};

  (in_, in_ptr) <- ptr_to_fresh_readonly "in" (llvm_array len' (llvm_int 8));
  out_ptr <- crucible_alloc (llvm_array len' (llvm_int 8));
  key_ptr <- crucible_alloc_readonly (llvm_struct "struct.aes_key_st");
  key <- fresh_aes_key_st;
  points_to_aes_key_st key_ptr key;
  (ivec, ivec_ptr) <- ptr_to_fresh_readonly "ivec" (llvm_array AES_BLOCK_SIZE (llvm_int 8));

  crucible_execute_func [in_ptr, out_ptr, (crucible_term {{ `len : [64] }}), key_ptr, ivec_ptr];

  crucible_points_to out_ptr (crucible_term {{ aes_hw_ctr32_encrypt_blocks in_ key.rd_key ivec }});
};


////////////////////////////////////////////////////////////////////////////////
// Proof commands

aes_hw_set_encrypt_key_ov <- llvm_verify_x86 m "../../build/x86/crypto/crypto_test" "aes_hw_set_encrypt_key"
  []
  true
  aes_hw_set_encrypt_key_spec
  (do {
    simplify (cryptol_ss ());
    simplify (addsimps slice_384_thms basic_ss);
    w4_unint_yices ["SubByte'"];
  });

aes_hw_encrypt_ov <- llvm_verify_x86 m "../../build/x86/crypto/crypto_test" "aes_hw_encrypt"
  []
  true
  aes_hw_encrypt_spec
  (do {
    simplify (cryptol_ss ());
    simplify (addsimps slice_384_thms basic_ss);
    w4_unint_yices ["AESRound", "AESFinalRound"];
  });
aes_hw_encrypt_ov' <- llvm_verify_x86 m "../../build/x86/crypto/crypto_test" "aes_hw_encrypt"
  []
  true
  aes_hw_encrypt_spec'
  (do {
    simplify (cryptol_ss ());
    simplify (addsimps slice_384_thms basic_ss);
    w4_unint_yices ["AESRound", "AESFinalRound"];
  });

aes_hw_ctr32_encrypt_blocks_ov <- llvm_verify_x86 m "../../build/x86/crypto/crypto_test" "aes_hw_ctr32_encrypt_blocks"
  []
  true
  (aes_hw_ctr32_encrypt_blocks_spec 1)
  (do {
    simplify (cryptol_ss ());
    simplify (addsimps slice_384_thms basic_ss);
    w4_unint_yices ["AESRound", "AESFinalRound"];
  });

