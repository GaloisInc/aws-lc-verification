/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

/*
 * Rewrite rules proofs and goal tactics. This does not
 * contain any specifications or assumtions, thus it does
 * not require inspection in order to trust the
 * verification result.
 */

let intLt = parse_core "\\(x y : Integer) -> intLt x y";

exp_0_thm <- prove_print assume_unsat (rewrite (cryptol_ss ()) {{ \x (d : [n_bits]) n -> exp (x % n) (integerFromBV d) == (exp x (integerFromBV d)) % n }});
exp_1_thm <- prove_print assume_unsat (rewrite (cryptol_ss ()) {{ \x (e : [64]) n -> exp (x % n) (integerFromBV e) == (exp x (integerFromBV e)) % n }});
exp_2_thm <- prove_print assume_unsat (rewrite (cryptol_ss ()) {{ \x (d : [n_bits]) (e : [64]) -> exp (exp x (integerFromBV d)) (integerFromBV e) == exp x ((integerFromBV d) * (integerFromBV e)) }});

integerModulusFromBV_0_thm <- prove_print (w4_unint_z3 []) (rewrite (cryptol_ss ()) {{ \x (m : [n_bits]) -> integerFromBV (integerToBV`{n_bits} (x % (integerModulusFromBV m))) == x % (integerModulusFromBV m) }});
integerModulusFromBV_1_thm <- prove_print
  (do {
    w4_unint_z3 ["integerFromBV"];
  })
  (rewrite (cryptol_ss ()) {{ \(x : Integer) (m : [n_bits]) -> (x % (integerModulusFromBV m)) % (integerModulusFromBV m) == x % (integerModulusFromBV m) }});

integerFromBV_0_thm <- prove_print (w4_unint_z3 []) (rewrite (cryptol_ss ()) {{ \(x : [n_bits]) -> 0 <= (integerFromBV x) == True }});

fermat_euler_thm <- prove_print assume_unsat (rewrite (cryptol_ss ()) {{ \a x n -> (exp a x) % n == if (x % (phi n) == 1 /\ (rad n) == n) then (a % n) else ((1 * (exp a x)) % n) }});

fermat_euler_0_thm <- prove_print
  (do {
    simplify (cryptol_ss ());
    simplify basic_ss;
    simplify (addsimp fermat_euler_thm empty_ss);
    w4_unint_z3 ["exp", "phi", "rad"];
  })
  (rewrite (cryptol_ss ()) {{ \a x n -> (exp a x) % n == if (x % (phi n) == 1 /\ (rad n) == n) then (if (0 <= a /\ a < n) then a else (a % n)) else ((1 * (exp a x)) % n) }});

let vrfy_tactic = simplify (addsimps [fermat_euler_0_thm, integerFromBV_0_thm] empty_ss);

intLt_0_thm <- prove_print
  (w4_unint_z3 ["integerFromBV"])
  (rewrite (cryptol_ss ()) (rewrite basic_ss {{ \(x : [n_bits]) (y : [n_bits]) -> (intLt (integerFromBV x) (integerFromBV y)) == if ((integerFromBV x) < 2 ^^ (`n_bits - 1) /\ 2 ^^ (`n_bits - 1) <= (integerFromBV y)) then True else ((integerFromBV x) - (integerFromBV y) < 0) }}));
intLt_1_thm <- prove_print
  (w4_unint_z3 [])
  (rewrite (cryptol_ss ()) {{ \(n : [n_bits]) -> 2 ^^ (`n_bits - 1) <= (integerFromBV n) == (is_num_bits_bn`{n_bits} n) }});
intLt_2_thm <- prove_print
  (w4_unint_z3 [])
  (rewrite (cryptol_ss ()) {{ \m s -> (integerFromBV (join (PSS_mgf1_encode`{n_bytes} m s))) < 2 ^^ (`n_bits - 1) == True }});
PSS_mgf1_encode_0_thm <- prove_print
  (do {
    simplify (cryptol_ss ());
    simplify basic_ss;
    simplify (addsimps [intLt_0_thm, intLt_1_thm, intLt_2_thm] empty_ss);
    w4_unint_z3 ["PSS_mgf1_encode", "integerFromBV"];
  })
  (rewrite (cryptol_ss ()) {{ \(n : [n_bits]) m s -> intLt (integerFromBV (join (PSS_mgf1_encode`{n_bytes} m s))) (integerFromBV n) == if (is_num_bits_bn`{n_bits} n) then True else ((integerFromBV (join (PSS_mgf1_encode`{n_bytes} m s))) - (integerFromBV n) < 0) }});

