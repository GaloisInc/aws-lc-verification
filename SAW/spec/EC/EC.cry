/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
*/

module EC where

import Common::ModDivZ
import Common::EC::EC_P384


is_num_bits_bn : {m} (m <= w) => [w] -> Bit
is_num_bits_bn x = if `m == `w
  then x @ 0
  else take`{w - m} x == 0 /\ x @ (`w - `m)

integerToBV : {m} (fin m) => Integer -> [m]
integerToBV x = fromInteger x

integerFromBV : {m} (fin m) => [m] -> Integer
integerFromBV x = toInteger x


type JacobianBVPoint = { X : [w], Y : [w], Z : [w] }

jacobianToBV : JacobianPoint -> JacobianBVPoint
jacobianToBV p =
  { X = fieldElementToBV p.x
  , Y = fieldElementToBV p.y
  , Z = fieldElementToBV p.z
  }

jacobianFromBV : JacobianBVPoint -> JacobianPoint
jacobianFromBV p =
  { x = fieldElementFromBV p.X
  , y = fieldElementFromBV p.Y
  , z = fieldElementFromBV p.Z
  }

jacobianToMont : JacobianPoint -> JacobianPoint
jacobianToMont p =
  { x = (p.x * P384_R_p) % `P384_p
  , y = (p.y * P384_R_p) % `P384_p
  , z = (p.z * P384_R_p) % `P384_p
  }

jacobianFromMont : JacobianPoint -> JacobianPoint
jacobianFromMont p =
  { x = (p.x * P384_R_p_inv) % `P384_p
  , y = (p.y * P384_R_p_inv) % `P384_p
  , z = (p.z * P384_R_p_inv) % `P384_p
  }

jacobianToMontBV : JacobianPoint -> JacobianBVPoint
jacobianToMontBV p = jacobianToBV (jacobianToMont p)

jacobianFromMontBV : JacobianBVPoint -> JacobianPoint
jacobianFromMontBV p = jacobianFromMont (jacobianFromBV p)


mont_R : {n} (fin n, n >= 3) => Integer
mont_R = 2 ^^ `(width n) % `n

mont_R_inv : {n} (fin n, n >= 3) => Integer
mont_R_inv = fromZ (moddiv`{n} 1 (fromInteger (mont_R`{n})))

bn_mont_n0 : {n} (fin n, n >= 3) => [64]
bn_mont_n0 = fromInteger (((2 ^^ `(width n)) * mont_R_inv`{n} - 1) / `n)

